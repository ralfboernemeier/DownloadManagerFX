############################################################
# Default Logging Configuration File can be found in the Java JRE/DJK/lib directory
# Reference: https://docs.oracle.com/javase/8/docs/api/java/util/logging/FileHandler.html
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# To also add the ConsoleHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
handlers = java.util.logging.FileHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
#.level = SEVERE
.level = INFO

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
# Defaults to "%h/java%u.log
# java.util.logging.FileHandler.pattern = C:\\Temp\\JavaLogging\\OraLabInfo.%g.log
# Save in the user temp directory
java.util.logging.FileHandler.pattern = %t/DownloadManagerFX.%g.log

# Example to customize the SimpleFormatter output format 
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
# Example: [Fri Apr 27 15:37:01 CEST 2018] INFO: Result 1: Success! 
java.util.logging.SimpleFormatter.format = [%1$tc %2$s]%n%4$s: %5$s %n
java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

# limit specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit).
java.util.logging.FileHandler.limit = 1048576000

# count specifies how many output files to cycle through (defaults to 1). 
#java.util.logging.FileHandler.count = 3

# append specifies whether the FileHandler should append onto any existing files (defaults to false).
java.util.logging.FileHandler.append = true

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
#com.xyz.foo.level = SEVERE
#
############################################################
# JDBC Logging
#
# - OFF
# - SEVERE SQLExceptions and internal errors
# - WARNING SQLWarnings and bad but not fatal internal conditions
# - INFO Infrequent events
# - CONFIG SQL strings
# - FINE User code calls to the public API
# - FINER Calls to internal methods and internal calls to the public API
# - FINEST Calls to high volume internal methods and internal debug messages
# - ALL High volume internal debug messages not in FINEST
#
############################################################
#oracle.level=ALL
#oracle.jdbc.driver.level=ALL
#oracle.jdbc.pool.level=ALL
#oracle.jdbc.util.level=ALL
#oracle.sql.level=ALL

#oracle.jdbc.level = ALL
#oracle.net.ns.level = ALL
#oracle.jdbc.handlers = java.util.logging.FileHandler


